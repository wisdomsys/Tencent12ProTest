{"name": "test_search[阿里巴巴]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: connect ECONNREFUSED 127.0.0.1:8206", "trace": "args = (<appium_xueqiu.page.search.Search object at 0x103c27df0>, '../data/search.yaml', 'search'), kwargs = {}\n_black_list = [('xpath', '//*[@text=\"确定\"]'), ('xpath', '//*[@text=\"允许\"]'), ('xpath', '//*[@text=\"确认\"]'), ('id', 'com.xueqiu.android:id/tv_agree'), ('xpath', '//*[@text=\"下次再说\"]')], _max_num = 3\n_error_num = 1, BasePage = <class 'appium_xueqiu.page.base_page.BasePage'>, instance = <appium_xueqiu.page.search.Search object at 0x103c27df0>, f = <_io.BufferedReader name='tmp.png'>\ncontent = b'\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR\\x00\\x00\\x048\\x00\\x00\\x08\\xac\\x08\\x06\\x00\\x00\\x00\\xadGR\\xae\\x00\\x00\\x00\\x01sRGB\\x...0\\x00\\xd8\\x13\\x1c\\x00\\x00\\x00\\xc0\\x9e\\xe0\\x00\\x00\\x00\\x00\\xf6\\x02\\x10\\xdd\\x898B\\x80\\xbeS\\x00\\x00\\x00\\x00IEND\\xaeB`\\x82'\nele = ('xpath', '//*[@text=\"确认\"]')\n\n    def wrapper(*args, **kwargs):\n        _black_list = [\n            (By.XPATH, '//*[@text=\"确定\"]'),\n            (By.XPATH, '//*[@text=\"允许\"]'),\n            (By.XPATH, '//*[@text=\"确认\"]'),\n            (By.ID, 'com.xueqiu.android:id/tv_agree'),\n            (By.XPATH, '//*[@text=\"下次再说\"]'),\n        ]\n        _max_num = 3\n        _error_num = 0\n        from appium_xueqiu.page.base_page import BasePage\n        instance: BasePage = args[0]\n        try:\n            logging.info('run' + func.__name__ + '\\n args:\\n' + repr(args) + '\\n' + repr(kwargs))\n>           element = func(*args, **kwargs)\n\n../page/wrapper.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium_xueqiu.page.search.Search object at 0x103c27df0>, path = '../data/search.yaml', name = 'search'\n\n    @handle_black\n    def steps(self, path, name):\n        with open(path) as f:\n            steps = yaml.safe_load(f)[name]\n        raw = json.dumps(steps)\n        for key, value in self._params.items():\n            raw = raw.replace(f'${{{key}}}', value)\n        steps = json.loads(raw)\n        for step in steps:\n            if 'action' in step.keys():\n                action = step['action']\n                if 'click' == action:\n>                   self.find(step['by'], step['locator']).click()\n\n../page/base_page.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = (<appium_xueqiu.page.search.Search object at 0x103c27df0>, 'xpath', '//*[@text=\"BABA\"]'), kwargs = {}\n_black_list = [('xpath', '//*[@text=\"确定\"]'), ('xpath', '//*[@text=\"允许\"]'), ('xpath', '//*[@text=\"确认\"]'), ('id', 'com.xueqiu.android:id/tv_agree'), ('xpath', '//*[@text=\"下次再说\"]')], _max_num = 3\n_error_num = 1, BasePage = <class 'appium_xueqiu.page.base_page.BasePage'>, instance = <appium_xueqiu.page.search.Search object at 0x103c27df0>, f = <_io.BufferedReader name='tmp.png'>\ncontent = b'\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR\\x00\\x00\\x048\\x00\\x00\\x08\\xac\\x08\\x06\\x00\\x00\\x00\\xadGR\\xae\\x00\\x00\\x00\\x01sRGB\\x...0e\\x00\\x00\\x00`Op\\x00\\x00\\x00\\x00{\\x82\\x03\\x00\\x00\\x00\\xd8\\x0b\\xf1\\xc5\\xa5\\x8f\\xffl\"\\xdc\\x00\\x00\\x00\\x00IEND\\xaeB`\\x82'\nele = ('xpath', '//*[@text=\"下次再说\"]')\n\n    def wrapper(*args, **kwargs):\n        _black_list = [\n            (By.XPATH, '//*[@text=\"确定\"]'),\n            (By.XPATH, '//*[@text=\"允许\"]'),\n            (By.XPATH, '//*[@text=\"确认\"]'),\n            (By.ID, 'com.xueqiu.android:id/tv_agree'),\n            (By.XPATH, '//*[@text=\"下次再说\"]'),\n        ]\n        _max_num = 3\n        _error_num = 0\n        from appium_xueqiu.page.base_page import BasePage\n        instance: BasePage = args[0]\n        try:\n            logging.info('run' + func.__name__ + '\\n args:\\n' + repr(args) + '\\n' + repr(kwargs))\n            element = func(*args, **kwargs)\n            _error_num = 0\n            # 隐式等待恢复原来的设置\n            instance._driver.implicitly_wait(10)\n            return element\n        except Exception as e:\n            instance.screenshot('tmp.png')\n            with open('tmp.png', 'rb') as f:\n                content = f.read()\n            allure.attach(content, attachment_type=allure.attachment_type.PNG)\n            logging.error('element not found,handle black list')\n            # 出现异常，隐式等待时间设置小一点，快速的处理弹窗\n            instance._driver.implicitly_wait(1)\n            # 判断异常处理次数\n            if _error_num > _max_num:\n                raise e\n            _error_num += 1\n            # 处理黑名单里面的弹窗\n            for ele in _black_list:\n                ele_list = instance.finds(*ele)\n                if len(ele_list) > 0:\n                    ele_list[0].click()\n                    # 处理完弹窗再去查找元素目标\n                    return wrapper(*args, **kwargs)\n>           raise e\n\n../page/wrapper.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = (<appium_xueqiu.page.search.Search object at 0x103c27df0>, 'xpath', '//*[@text=\"BABA\"]'), kwargs = {}\n_black_list = [('xpath', '//*[@text=\"确定\"]'), ('xpath', '//*[@text=\"允许\"]'), ('xpath', '//*[@text=\"确认\"]'), ('id', 'com.xueqiu.android:id/tv_agree'), ('xpath', '//*[@text=\"下次再说\"]')], _max_num = 3\n_error_num = 1, BasePage = <class 'appium_xueqiu.page.base_page.BasePage'>, instance = <appium_xueqiu.page.search.Search object at 0x103c27df0>, f = <_io.BufferedReader name='tmp.png'>\ncontent = b'\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR\\x00\\x00\\x048\\x00\\x00\\x08\\xac\\x08\\x06\\x00\\x00\\x00\\xadGR\\xae\\x00\\x00\\x00\\x01sRGB\\x...0e\\x00\\x00\\x00`Op\\x00\\x00\\x00\\x00{\\x82\\x03\\x00\\x00\\x00\\xd8\\x0b\\xf1\\xc5\\xa5\\x8f\\xffl\"\\xdc\\x00\\x00\\x00\\x00IEND\\xaeB`\\x82'\nele = ('xpath', '//*[@text=\"下次再说\"]')\n\n    def wrapper(*args, **kwargs):\n        _black_list = [\n            (By.XPATH, '//*[@text=\"确定\"]'),\n            (By.XPATH, '//*[@text=\"允许\"]'),\n            (By.XPATH, '//*[@text=\"确认\"]'),\n            (By.ID, 'com.xueqiu.android:id/tv_agree'),\n            (By.XPATH, '//*[@text=\"下次再说\"]'),\n        ]\n        _max_num = 3\n        _error_num = 0\n        from appium_xueqiu.page.base_page import BasePage\n        instance: BasePage = args[0]\n        try:\n            logging.info('run' + func.__name__ + '\\n args:\\n' + repr(args) + '\\n' + repr(kwargs))\n>           element = func(*args, **kwargs)\n\n../page/wrapper.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium_xueqiu.page.search.Search object at 0x103c27df0>, locator = 'xpath', value = '//*[@text=\"BABA\"]'\n\n    @handle_black\n    def find(self, locator, value: str = None):\n        element: WebElement\n        if isinstance(locator, tuple):\n            element = self._driver.find_element(*locator)\n        else:\n>           element = self._driver.find_element(locator, value)\n\n../page/base_page.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.webdriver.WebDriver (session=\"92b5e58d-53ef-409b-aa4c-33db050eab94\")>, by = 'xpath', value = '//*[@text=\"BABA\"]'\n\n    def find_element(self, by: str = By.ID, value: Union[str, Dict] = None) -> MobileWebElement:\n        \"\"\"'Private' method used by the find_element_by_* methods.\n    \n        Override for Appium\n    \n        Usage:\n            Use the corresponding find_element_by_* instead of this.\n    \n        Returns:\n            `appium.webdriver.webelement.WebElement`: The found element\n    \n        \"\"\"\n        # TODO: If we need, we should enable below converter for Web context\n        # if self.w3c:\n        #     if by == By.ID:\n        #         by = By.CSS_SELECTOR\n        #         value = '[id=\"%s\"]' % value\n        #     elif by == By.TAG_NAME:\n        #         by = By.CSS_SELECTOR\n        #     elif by == By.CLASS_NAME:\n        #         by = By.CSS_SELECTOR\n        #         value = \".%s\" % value\n        #     elif by == By.NAME:\n        #         by = By.CSS_SELECTOR\n        #         value = '[name=\"%s\"]' % value\n    \n>       return self.execute(RemoteCommand.FIND_ELEMENT, {'using': by, 'value': value})['value']\n\n/usr/local/lib/python3.9/site-packages/appium/webdriver/webdriver.py:282: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.webdriver.WebDriver (session=\"92b5e58d-53ef-409b-aa4c-33db050eab94\")>, driver_command = 'findElement', params = {'using': 'xpath', 'value': '//*[@text=\"BABA\"]'}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x103c27130>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"An element could not be located on the page u...pium.app/Contents/Resources/app/node_modules/appium/node_modules/appium-android-driver/lib/commands/find.js:75:11)\"}}'}\n\n    def check_response(self, response: Dict) -> None:\n        try:\n            super().check_response(response)\n        except WebDriverException as wde:\n            if wde.msg == 'No such context found.':\n                raise NoSuchContextException(wde.msg, wde.screen, wde.stacktrace) from wde\n            else:\n>               raise wde\n\n/usr/local/lib/python3.9/site-packages/appium/webdriver/errorhandler.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x103c27130>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"An element could not be located on the page u...pium.app/Contents/Resources/app/node_modules/appium/node_modules/appium-android-driver/lib/commands/find.js:75:11)\"}}'}\n\n    def check_response(self, response: Dict) -> None:\n        try:\n>           super().check_response(response)\n\n/usr/local/lib/python3.9/site-packages/appium/webdriver/errorhandler.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x103c27130>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"An element could not be located on the page u...pium.app/Contents/Resources/app/node_modules/appium/node_modules/appium-android-driver/lib/commands/find.js:75:11)\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: An element could not be located on the page using the given search parameters.\n\n/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:242: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <appium_xueqiu.testcase.test_search.TestSearch object at 0x103c27e50>, name = '阿里巴巴'\n\n    @pytest.mark.parametrize(\"name\",yaml.safe_load(open('test_search.yaml',encoding='utf-8')))\n    def test_search(self, name):\n>       self.search.search(name)\n\ntest_search.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../page/search.py:11: in search\n    self.steps('../data/search.yaml', 'search')\n../page/wrapper.py:43: in wrapper\n    ele_list = instance.finds(*ele)\n../page/base_page.py:37: in finds\n    elements = self._driver.find_elements(locator, value)\n/usr/local/lib/python3.9/site-packages/appium/webdriver/webdriver.py:312: in find_elements\n    return self.execute(RemoteCommand.FIND_ELEMENTS, {'using': by, 'value': value})['value'] or []\n/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n/usr/local/lib/python3.9/site-packages/appium/webdriver/errorhandler.py:31: in check_response\n    raise wde\n/usr/local/lib/python3.9/site-packages/appium/webdriver/errorhandler.py:26: in check_response\n    super().check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x103c27130>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"An unknown server-side error occurred while pro...m.app/Contents/Resources/app/node_modules/appium/node_modules/appium-base-driver/lib/jsonwp-proxy/proxy.js:261:13)\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: connect ECONNREFUSED 127.0.0.1:8206\n\n/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:242: WebDriverException"}, "attachments": [{"source": "738fde16-a15b-4a46-a2ac-93478d150dde-attachment.png", "type": "image/png"}, {"source": "a7f211af-5ff9-46c5-b788-9364670be845-attachment.png", "type": "image/png"}, {"name": "log", "source": "d27f29f7-f024-4ac7-be55-64b873536fdb-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "ef9fcd2b-896b-4bcf-9b69-76da67f84c55-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "name", "value": "'阿里巴巴'"}], "start": 1619680210832, "stop": 1619680242638, "uuid": "38954abe-0af1-4e82-b747-e9ef85d6b7ca", "historyId": "0cf8b5953a29b99d78bdaa61ae94666b", "testCaseId": "c468848d249de0461b29b4a57016c882", "fullName": "test_search.TestSearch#test_search", "labels": [{"name": "suite", "value": "test_search"}, {"name": "subSuite", "value": "TestSearch"}, {"name": "host", "value": "Joseph-new.local"}, {"name": "thread", "value": "24939-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_search"}]}